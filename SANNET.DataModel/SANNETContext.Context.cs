//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SANNET.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SANNETContext : DbContext
    {
        public SANNETContext()
            : base("name=SANNETContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ApplicationLog> ApplicationLogs { get; set; }
        public virtual DbSet<NetworkConfiguration> NetworkConfigurations { get; set; }
        public virtual DbSet<Prediction> Predictions { get; set; }
    
        public virtual ObjectResult<GetTestingDataset1_Result> GetTestingDataset1(Nullable<int> companyId, Nullable<System.DateTime> date)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTestingDataset1_Result>("GetTestingDataset1", companyIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<GetTestingDataset2_Result> GetTestingDataset2(Nullable<int> lastId)
        {
            var lastIdParameter = lastId.HasValue ?
                new ObjectParameter("lastId", lastId) :
                new ObjectParameter("lastId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTestingDataset2_Result>("GetTestingDataset2", lastIdParameter);
        }
    
        public virtual ObjectResult<GetTrainingDataset1_Result> GetTrainingDataset1(Nullable<int> companyId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingDataset1_Result>("GetTrainingDataset1", companyIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetTrainingDataset2_Result> GetTrainingDataset2(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingDataset2_Result>("GetTrainingDataset2", idParameter);
        }
    }
}
